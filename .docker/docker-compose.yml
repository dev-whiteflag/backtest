version: '3.9'

services:

  backtest:
    build:
      context: .
      dockerfile: ../backend/src/main/docker/Dockerfile.native
    image: imwhiteflag/backtest-quarkus:native
    mem_limit: 128m
    environment:
      - BACKTEST_DB_USERNAME=postgres
      - BACKTEST_DB_PASSWORD=postgres
      - BACKTEST_DB_URI=jdbc:postgresql://localhost:5432/backtest
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - service
    
  postgres:
    image: postgres
    mem_limit: 128m
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: backtest-quotation
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quarkus"]
      interval: 5s
      timeout: 5s
      retries: 6
    networks:
      - service
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.36.2
    mem_limit: 256m
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    networks:
      - service
    restart: always

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    mem_limit: 128m
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres:5432/shop?sslmode=true"
    depends_on:
      - prometheus
      - postgres
    networks:
      - service
      
  grafana:
    image: grafana/grafana
    mem_limit: 256m
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - service
    restart: always

  jaeger:
    image: jaegertracing/all-in-one:latest
    mem_limit: 256m
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - service

networks:
  service:
    driver: bridge

volumes:
  postgres:
  grafana_data:
  prometheus_data: