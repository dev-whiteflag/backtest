version: '3.9'

services:

  backtest:
    build:
      context: .
      dockerfile: ../backend/src/main/docker/Dockerfile.native
    image: imwhiteflag/backtest-quarkus:native
    mem_limit: 128m
    environment:
      - QUARKUS_DATASOURCE_URL=jdbc:postgresql://postgres:5432/backtest
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - service
    
  postgres:
    image: postgres
    mem_limit: 128m
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quarkus"]
      interval: 5s
      timeout: 5s
      retries: 6
    networks:
      - service
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.36.2
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
#    links:
#      - pushgateway:pushgateway
#    depends_on:
#      - pushgateway
    networks:
      - service
    restart: always
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - service
    restart: always

networks:
  service:
    driver: bridge

volumes:
  postgres:
  grafana_data:
  prometheus_data: